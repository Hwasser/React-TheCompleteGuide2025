Denna del går igenom:
1. Styling with Vanilla CSS
2. Scoping styles with CSS Modules
3. CSS-in-JS styling with "Styled Components"
4. Styling with Tailwind CSS
5. Static & Dynamic styling

1. Fungerar genom att man splittrar CSS och har en CSS-fil för varje komponent.
+ Fördelen med detta är att flera personer kan arbeta med styling samtidigt.
+ En annan fördel att man skriver vanlig CSS fil.
- CSS är inte skoopat till komponenter. Dvs CSS relger krockar mellan komponenter.
-> Alla CSS-filer inkluderas i HEAD-delen i index.html

Fördelen med inline-stiler är att man skoopar stil till endast en tag, dock så blir detta
bökigt om det skall göras med alla taggar. En annan nackdel är att man inte de-couplar CSS med JSX
och UI och FrontEnd personer kan då inte arbeta samtidigt.

2. Med CSS moduler kan man scoopa klassnamn lokalt.
-> är inte default för CSS eller JavaScript.
Hur det använts: 
    i:   Döpa modulen till Namn.module.css 
    ii:  Importera som "import namn from Namn.module.css"
    iii: Hämta via <p className={namn.klass}> asd </p>

3. Styled components package
-> Definerar inte styling inline eller i css filer, utan i komponenter. Dvs då får tillbaka en stylad tag.

const ControlContainer = styled.div`
   display: flex;
   flex-direction: column;
   gap: 0.5rem;
  margin-bottom: 1.5rem;
`;

Man använder en D "tagged templates" vilket är en mer avancerad form at template literals.
obs: Props för taggad följer med komponenten
-> Läraren visar att det går att göra dynamiska stylade komponenter genom att lägga in ${(props) => ...} i en tagged template,
   however, nu måste man göra så här: color: ${({ $invalid }) => ($invalid ? '#f87171' : '#6b7280')};
   $ före variabeln säger åt kompilatorn att inte forwarda proppen in i DOM-elementet.

   "A transient prop (prefixed with $) is a prop that styled-components uses for styling logic but does not pass to the DOM. 
   This prevents React from rendering it as an attribute, avoiding warnings like the one you’re seeing."

Man kan även använda media queries och suedo selectors så som "hover" via stylade komponenter. (se Header.jsx)

Styled Components
+ snabbt och enkelt att lägga till
+ kan använda i reakt-tänk
+ stilar är automatiskt scoopade
- måste kunna css
- förlorar separationen mellan React och CSS
- slutar upp med massa små wrapper-komponenter

För enkelhetens skull så körde jag tailwindcss in en codesandbox för att köra en legacy-version av tailwind.
-> Bra att notera är att man kan bör till fonts i "tailwind.config.js"
-> Responsive design sköts med "breakpoint prefix", t ex md:w-32 där md är samma som @media (min-width: 768px)

- Nackdelen med tailwind är att man slutar upp med långa klasser på varje html-tag.