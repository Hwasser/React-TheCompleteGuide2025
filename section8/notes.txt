Refs & Portals: Advanced DOM Access & Value Management
------------------------------------------------------

En REF är en speciell typ av variabel som sköts av react - inte ett tillstånd då
tillstånd uppdaterar renderingen.

Ref är dessutom en inbyggd prop i taggar. Man kopplar en komponent
med en ref genom att skriva:
    const playerName = useRef();
    ...
    <input ref={playerName} />

En ref är ett objekt som bara har en property = current.

En ref är en handle, en "opaque data type"

    (opaque data type is a data type whose concrete data structure is not defined in an interface. This enforces information 
    hiding, since its values can only be manipulated by calling subroutines that have access to the missing information)

enteredPlayerName ?? 'uknown entity' -> om enteredPlayerName inte finns, kör ett fallback value

Använd alltid state för värden som påverkar UI, för värden
som inte påverkar UI - använd variabler eller refs.

Refs är en referens till en tag och samma tag koms ihåg även
när vyn ritas om efter tillståndsförändring. Men även om man
ändrar värdet till en tag i en ref så kommer man inte se förändringen
om inte vyn ritas om.

Obs, custom components kan inte refereras till.
I React >= v19 så kan man dock passa vidare en ref till en custom component och använda den inne i komponenten.
I React < 19 så måste man använda en funktion (som man importerar) som heter forwardRef,
  man wrappar hela komponent-funktionen i den på följande sätt:
  const ResultComponent = forwardRef(function CustomComponent({ props }, ref) { ... })

----------------------
Dialog:

Det finns en html tag som heter Dialog. Den har bland annat ett attribute som heter open,
om open=true (via t ex <dialog open>) så kommer innehåller innanför taggarna att synas.
-> Kan vara modal (blockerar saker i bakgrunden och gör att fokus läggs på dialogen) eller icke-modal.
-> Om modal öppnas den med showModal(), annars med show(). 
-> open() används endast om den skall vara öppen när sidan startas. Open är inte en metod, utan endast ett attribut.

Man kan stänga en dialog utan javascript genom att använda en form med metoden "dialog":
    <form method="dialog">
        <button>Close</button>
    </form>

Man kan använda CSS pseudo-elementet "backdrop" för att lägga en bakgrund under dialogen, via tex:
    dialog::backdrop {
        background-color: salmon;
    }
----------------------

En bra idé är att bygga en komponent så att propsen sköts via react-logik snarare än att matas in i taggar direkt,
särskilt när det gäller metoder på taggar (t ex showModal()).
-> Detta eftersom att andra i projektet inte skall behöva gräva ner sig i alla komponenter och så att framtida
   förändringar inte förstår kod som kallar komponenterna.
-> Precis som man kan förstå av ovan så kan useImperativeHandle användas som ett API interface.
-> Man kan använda "useImperativeHandle" för när en parent vill kalla metoder på dess childs.

----------------------

Portaler: Vi kan se t ex hur vår <dialog> är nestad långt in i andra element. Men det vore mer logiskt ifall 
<dialog> sitter högre upp i trädet - eftersom att en pop-up-vy är en del av den yttersta kroppen snarare än en
del av ResultModal-delen (även fast den deklareras där). Bland annat blir accessability sämre eftersom att andra
element kan lägga sig ovanpå om man går in i utvecklar-vyn.

Portal-delen är en del av 'react-dom' som är React specifikt för webben - eller DOM-manipulering.
Det vanliga 'react'-biblioteket är för alla typer av komponenter, inkl Native-komponenter.